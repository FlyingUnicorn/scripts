# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

###########
#  COLOR  #
###########
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underlined
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White


##############
#  SETTINGS  #
##############
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\033[1;34m\u\033[0m:\033[0;34m\H\033[0m \033[0;33m\w\033[0m \$ > \[\033[0m\]'
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
# if ! shopt -oq posix; then
#   if [ -f /usr/share/bash-completion/bash_completion ]; then
#     . /usr/share/bash-completion/bash_completion
#   elif [ -f /etc/bash_completion ]; then
#     . /etc/bash_completion
#   fi
# fi

stty -ixon # Disable ctrl-s and ctrl-q
shopt -s autocd # cd into dir without cd keyword and just dir name
shopt -s checkwinsize # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.

export IGNOREEOF=3 # require 3 Ctrl-d to logout

bind "set completion-ignore-case on"
bind "TAB:menu-complete"
bind '"\e[Z":menu-complete-backward'
bind "set show-all-if-ambiguous on"


# History settings
HISTSIZE=HISTFILESIZE= # Infinite history
HISTTIMEFORMAT=`echo -e ${BYellow}[%F %T] ${NC}`
shopt -s histappend # append to the history file
HISTCONTROL=ignorespace

#############
#  ALIASES  #
#############
alias la='ls -a'
alias ll='ls -alhF --color=auto --group-directories-first'

alias h='history | less -R'
alias ht='history 50'
alias c='clear'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias diskspace="du -S | sort -n -r |more"

alias mvi="mv -vi"
alias cpi="cp -vi"
alias rmi="rm -vi"

###############
#  FUNCTIONS  #
###############

cpuload() {

    previousStats=$(cat /proc/stat)
    sleep 1
    currentStats=$(cat /proc/stat)

    cpus=$(echo "$currentStats" | grep -P 'cpu' | awk -F " " '{print $1}')
    for cpu in $cpus
    do
        currentLine=$(echo "$currentStats" | grep "$cpu ")
        user=$(echo "$currentLine" | awk -F " " '{print $2}')
        nice=$(echo "$currentLine" | awk -F " " '{print $3}')
        system=$(echo "$currentLine" | awk -F " " '{print $4}')
        idle=$(echo "$currentLine" | awk -F " " '{print $5}')
        iowait=$(echo "$currentLine" | awk -F " " '{print $6}')
        irq=$(echo "$currentLine" | awk -F " " '{print $7}')
        softirq=$(echo "$currentLine" | awk -F " " '{print $8}')
        steal=$(echo "$currentLine" | awk -F " " '{print $9}')
        guest=$(echo "$currentLine" | awk -F " " '{print $10}')
        guest_nice=$(echo "$currentLine" | awk -F " " '{print $11}')

        previousLine=$(echo "$previousStats" | grep "$cpu ")
        prevuser=$(echo "$previousLine" | awk -F " " '{print $2}')
        prevnice=$(echo "$previousLine" | awk -F " " '{print $3}')
        prevsystem=$(echo "$previousLine" | awk -F " " '{print $4}')
        previdle=$(echo "$previousLine" | awk -F " " '{print $5}')
        previowait=$(echo "$previousLine" | awk -F " " '{print $6}')
        previrq=$(echo "$previousLine" | awk -F " " '{print $7}')
        prevsoftirq=$(echo "$previousLine" | awk -F " " '{print $8}')
        prevsteal=$(echo "$previousLine" | awk -F " " '{print $9}')
        prevguest=$(echo "$previousLine" | awk -F " " '{print $10}')
        prevguest_nice=$(echo "$previousLine" | awk -F " " '{print $11}')    

        PrevIdle=$((previdle + previowait))
        Idle=$((idle + iowait))

        PrevNonIdle=$((prevuser + prevnice + prevsystem + previrq + prevsoftirq + prevsteal))
        NonIdle=$((user + nice + system + irq + softirq + steal))

        PrevTotal=$((PrevIdle + PrevNonIdle))
        Total=$((Idle + NonIdle))

        totald=$((Total - PrevTotal))
        idled=$((Idle - PrevIdle))

        CPU_Percentage=$(awk "BEGIN {printf \"%2.2f\", ($totald - $idled)/$totald*100}")

        if [[ "$cpu" == "cpu" ]]; then
            echo " cpu total "$CPU_Percentage"%"
            # printf "CPU total: %.2f\n", $CPU_Percentage 
        else
            echo "    "$cpu" "$CPU_Percentage"%"
        fi
    done
}

hello() {
    clear;
    printf " Hello %s\n" $USER;
    printf " *********** DATE ************\n" $USER;
    date +" Time: %T";
    date +" Date: %Y-%m-%d";
    date +" Day:  %A";
    date +" Week: %W";
    printf " ********** SYSTEM ***********\n"
    uptime -p | awk '{$1=""; printf(" Uptime:%s\n", $0)}'
    free | grep Mem | awk '{ printf(" MEM usage: %.2f%\n", (1-$7/$2) * 100.0) }'
    cpuload
    printf " *****************************\n"
}

# Trash
trash() {
    for file in "$@"
    do
        rnd=$RANDOM
        file_uniq=$file"_$rnd"
        mv -i $file ~/.Trash/$file_uniq
        date +"%Y-%m-%d %T - Trashed > $PWD/$file > $file_uniq" >> ~/.Trash/Trash.log
    done
}

trash_comp() {
    cnt=0
    for file in ~/.Trash/*;
    do
        filename_base=$(basename -- $file)
        extension="${filename_base##*.}"
        filename="${filename_base%.*}"
        #echo $filename
        #echo $extension
        if [[ $filename".$extension" != "Trash.log" &&  $extension != "bz2" ]];
        then
             bzip2 $file
             date +"%Y-%m-%d %T - Compressed > $filename_base" >> ~/.Trash/Trash.log
             let "cnt+=1"
        fi
    done
    echo "Compressed $cnt files"
}

#############
#  SCRIPTS  #
#############
source hist_parser.sh


echo -e "$ICyan --- Bashrc read --- $Color_Off"
